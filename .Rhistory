df2
keys = c('C'
,"D")
vals = c('C','D')
replace_df(df1,df2,keys,vals)
df <- data.frame(is=1:10, x1=rnorm(10),
x2 = runif(10,0,1))
df
melt(df, id='id')
melt(df, id='id')
melt(df, id='id')
malt(df, id='id')
library(xts)
newTick <- function(data='2017-01-01', n=10){
newdate <- paste(date, 10:00:00)
xts(round(rnorm(n,10,3),2),order.by = as.POSIXct(newdate)
+seq(0,(n-1)*60,60))
}
dates <-  as.Date('2017-01-01')+seq(0,360,1)
head(dates)
xs <- lapply(dates, function(date)
{
newTick(date())
})
newTick <- function(date='2017-01-01', n=30){
newdate <- paste(date, 10:00:00)
xts(round(rnorm(n,10,2),2),order.by = as.POSIXct(newdate)
+seq(0,(n-1)*60,60))
}
dates <-  as.Date('2017-01-01')+seq(0,360,1)
head(dates)
xs <- lapply(dates, function(date)
{
newTick(date())
})
xs <- lapply(dates, function(date)
{
newTick(date())
})
newTick <- function(date='2017-01-01', n=30){
newdate <- paste(date, 10:00:00)
xts(round(rnorm(n,10,2),2),order.by = as.POSIXct(newdate)
+seq(0,(n-1)*60,60))
}
dates <-  as.Date('2017-01-01')+seq(0,360,1)
head(dates)
xs <- lapply(dates, function(date)
{
newTick(date())
})
{
newTick(date
})
xs <- lapply(dates, function(date)
{
newTick(date)
})
str(head(xs,2))
xs <- lapply(dates, function(date)
{
newTick(date)
})
str(head(xs,2))
df <- do.call(rbind.data.frame, xs)
xdf <- as.xts(df)
head(xdf)
d1<- to.period(xdf,period = 'days')
head(d1)
ml <- to.period(xdf,period = 'months')
head(m1)
head(ml)
d7 <- to.period(xdf, period = 'days',k=7)
head(d7)
plot(d1$xdf, close)
plot(d1$xdf.Close)
lines(d7$xdf.Close, col='red', lwd=2)
lines(ml$xdf.Close, col='blue', lwd=2)
lines(d7$xdf.Close, col='red', lwd=2)
lines(ml$xdf.Close, col='blue', lwd=2)
lines(ml$xdf.Close, col='blue', lwd=2)
plot(d1$xdf.Close)
lines(d7$xdf.Close, col='red', lwd=2)
lines(ml$xdf.Close, col='blue', lwd=2)
head(d1)
head(ml)
head(d7)
plot(d1$xdf.Close)
lines(d7$xdf.Close, col='red', lwd=2)
lines(ml$xdf.Close, col='blue', lwd=2)
lines(ml$xdf.Close, col='blue', lwd=2)
# tidyverse#
# library(magrittr)
# rnorm(100) %>% abs() %>% hist
#dorder the dataframe columns
df <- data.frame(a=1:5, b = c('a','b','c','d','e'), c= rnorm(5))
df
order_df <- function(df, col,decreasing=FALSE){
+   df[order(df[,c(col)], decreasing=decreasing),]
+ }
#use function
order_df(df, 'c', decreasing = TRUE)
#qu chong and zhao chong
x <- c(1:6, 5:8)
#qu diao chongfu items
unique(x)
#find chongfu item, index location
duplicated(x)
#find chongfu items
x[duplicated(x)]
#transform
m <- matrix(1:15, ncol=5)
t(m)
#guolv
df <- data.frame(a=c(1,NA, NA, 2, NA), b = c('a',NA,'c','d','e'), c= c(rnorm(2), NA,NA,NA))
df
#split the rows that have NA
na.omit(df)
#split, reserve B column have B
df[which(df$b=='b'),]
#fill NA
df <- data.frame(a=c(1,NA, NA, 2, NA), b = c('a',NA,'c','d','e'), c= c(rnorm(2), NA,NA,NA))
#use B tu fill a NA
na.fill(df$a, 9)
#use 1 to fill NA
na.fill(df, 1)
#generate zoo type
z<- zoo(c(2,NA, 1,4,5,2), c(1,3,4,6,7,8))
z
#to linear chazhi NA
na.approx(z
)
na.approx(z,1:6)
#yangtiao chazhi
na.spline(z)
df
#qianzhi fill NA
na.locf(df)
#houzhi fill NA
na.locf(z, fromLast = TRUE)
#count
set.seed(0)
x<- round(rnorm(30)*5)
x
#calculate count
table(x)
#use histgram to graph
hist(x, xlim = c(-10,13), breaks = 10)
# generate high data
set.seed(
0)
x <- round(rnorm(100,170,10))
head(x,20)
plot(x)
#normal test
shapiro.test(x)
#QQ graph
qqnorm(x)
qqline(x, col='red')
hist(x, breaks = 10)
x <- 1:10
#vector transform factor
cut(x,3)
#rexerve 2 jingdu and support order
cut(x, 3, dig.lab = 2, ordered = TRUE)
#use set
x <- c(3:8, NA)
x
y <- c(NA,6:10,NA)
y
#panduan x and y chongfu item location
is.element(x,y)
#union set
union(x,y)
#intersect set
intersect(x,y)
#x have y not
setdiff(x,y)
#x and y equal
setequal(x,y)
# run mean
set.seed(0)
x <- round(rnorm(50)*10)
head(x,10)
#library TTR
library(TTR)
#calculate run mean cycle 3
m3 <- SMA(x,3)
head(m3, 10)
m5 <- SMA(x,5)
head(m5,10)
#graph
plot(x, type = 'l')
lines(m3, col='blue')
lines(m5, col='red')
#time duiqi
a <- as.POSIXct('2017-01-01 10:00:00')+0:300
b <- as.POSIXct('2017-01-01 10:00')+seq(1,300,59)
head(a,10)
head(b,10)
#minute duiqi
a1 <- align.time(a, 1*60)
b1 <- align.time(b, 1*60)
head(a1,10)
a1[endpoints(a1,'minutes')]
#panduan which column is NA
na_col_del_df <- function(df){
df[,which(!apply(df,2,function(x) all(is.na(x))))] }
#generate dataset
df <- data.frame(a=c(1,NA,2,4),b=rep(NA,4), c=1:4)
df
na_col_del_df(df)
# replace dataframe region data
replace_df <- function(df1,df2,keys,vals){
row1 <- which(apply(mapply(match,df1[,keys],df2[,keys])>0,1,all))
row2 <- which(apply(mapply(match, df2[,keys],df1[,keys])>0,1,all))
df1[row1,vals]<-df2[row2,vals]
return(df1)
}
df1 <- data.frame(A=c(1,2,3,4), B= c('a','b','c','d'),C=c(0,4,0,4),D=1:4)
df1
df2 <- data.frame(A=c(1,3), B=c('a','c'),C=c(9,9), D=rep(8,2))
df2
#define match column
keys = c('C'
,"D")
#define transform
vals = c('C','D')
#data replace
replace_df(df1,df2,keys,vals)
#long table become short table
library(reshape2)
wide <- reshape(df, v.names = 'time',
idvar = 'program',timevar = 'fun',
direction = 'wide')
#wide table become long table
reshape(wide, direction = 'long',varying = 3:4)
#ronghua when ggplot2 fraph
df <- data.frame(is=1:10, x1=rnorm(10),
x2 = runif(10,0,1))
df
melt(df, id='id')
#cycle cut
library(xts)
#define generate everyday exchange data function
newTick <- function(date='2017-01-01', n=30){
newdate <- paste(date, 10:00:00)
xts(round(rnorm(n,10,2),2),order.by = as.POSIXct(newdate)
+seq(0,(n-1)*60,60))
}
#exchange date
dates <-  as.Date('2017-01-01')+seq(0,360,1)
head(dates)
#generate exchange data
xs <- lapply(dates, function(date)
{
newTick(date)
})
#data structure
str(head(xs,2))
#xs transform xts
df <- do.call(rbind.data.frame, xs)
xdf <- as.xts(df)
head(xdf)
#accirding day to cut
d1<- to.period(xdf,period = 'days')
head(d1)
#according month to cut
ml <- to.period(xdf,period = 'months')
head(ml)
#according 7fays to cut
d7 <- to.period(xdf, period = 'days',k=7)
head(d7)
#graph
plot(d1$xdf.Close)
lines(d7$xdf.Close, col='red', lwd=2)
lines(ml$xdf.Close, col='blue', lwd=2)
nba_shots <- read.csv('shot_logs.csv')
dim(nba_shots)#data dimmision
str(nba_shots)#data structure
library(tidyverse)#data analysis package
ggplot(nba_shots, aes(SHOT_DIST))+geom_histogram()#shot distance graph
ggplot(nba_shots, aes(CLOSE_DEF_DIST))+geom_histogram()+xlim(0,20)
ggplot(nba_shots, aes(SHOT_DIST, CLOSE_DEF_DIST
))+geom_point(aes(color=factor(SHOT_RESULT)))
+geom_vline(xintercept=c(15,22), color='blue')
ggplot(nba_shots, aes(DRIBBLES,TOUCH_TIME))+
geom_point(aes(color=factor(SHOT_RESULT)))+
ylim(-10,20)
(home_avay <- nba_shots %>% group_by(LOCATION)
%>% summarise(PERCENTAGE=sum(FGM)/length(FGM)*100))
wins <- nba_shots %>% group_by(GAME_ID, LOCATION) %>% filter(W=='W', FGM==1)
ggplot(data = wins, aes(LOCATION, fill=factor(W)))+geom_bar()
#term important guys
first_quarter_guys <- nba_shots %>% filter(PERIOD==1,
SHOT_DIST>5) %>% group_by(player_name) %>%
summarise(made=sum(FGM), points=sum(PTS),
total_attempts = length(FGM),
ave_distance=mean(SHOT_DIST)) %>%
mutate(percentage=made/total_attempts) %>%
arrange(desc(percentage)) %>% filter(total_attempts>200)
best_lst <- data.frame(first_quarter_guys)
best_lst
#best player
nba_shots %>% filter(SHOT_RESULT=='missed') %>%
group_by(CLOSEST_DEFENDER) %>% summarise(GoodDefense = n()) %>%
ungroup %>% arrange(desc(GoodDefense)) %>% head
#worst player
nba_shots %>% filter(SHOT_RESULT=='made') %>%
group_by(CLOSEST_DEFENDER) %>% summarise(BadDefense = n()) %>%
ungroup %>% arrange(desc(BadDefense)) %>% head
#feature select and filter
attach(nba_shots)
#filter touch_time < 0
nba_shots <- nba_shots[TOUCH_TIME > 0,]
#filter SHOT_RESULT
nba_shots <- nba_shots[,-14]
player_name <- as.character(player_name)
player_name <- factor(player_name)
#deal with game_clock var
GAME_CLOCK <- as.character(GAME_CLOCK)
GAME_CLOCK <- gsub(':', '.', GAME_CLOCK)
#the same with shot_colock
GAME_CLOCK <- as.numeric(GAME_CLOCK)
#select feature
nba_shots$Crucial_time <- 'No'
nba_shots$Crucial_time[nba_shots$GAME_CLOCK <= 1 &
nba_shots$PERIOD >= 4 & abs(nba_shots$FINAL_MARGIN)
<= 5] <- 'Yes'
nba_shots$Crucial_time <- factor(nba_shots$Crucial_time)
nba_shots$shot_type[nba_shots$DRIBBLES <= 1 &
nba_shots$SHOT_DIST > 4] <- 'Catch and Shoot'
nba_shots$shot_type[nba_shots$DRIBBLES <= 1 &
nba_shots$SHOT_DIST <= 4] <- 'Cut'
nba_shots$shot_type [nba_shots$DRIBBLES > 1 &
nba_shots$SHOT_DIST <= 4] <- 'Drive'
nba_shots$shot_type [nba_shots$DRIBBLES > 4] <- 'ISO'
nba_shots$shot_type [nba_shots$DRIBBLES > 20] <- 'Long ISO'
nba_shots$shot_type [nba_shots$DRIBBLES <= 1 &
nba_shots$PTS_TYPE == 3] <- 'Spot up Three'
nba_shots$shot_type <- factor(nba_shots$shot_type)
summary(nba_shots$shot_type)
#shot quality
nba_shots$shot_quality <- 'Open'
nba_shots$shot_quality[nba_shots$CLOSE_DEF_DIST <= 2] <- 'Tightly Contested'
nba_shots$shot_quality[nba_shots$CLOSE_DEF_DIST <= 3.5] <- 'Contested'
nba_shots$shot_quality[nba_shots$CLOSE_DEF_DIST > 6] <- 'Wide Open'
nba_shots$shot_quality <- factor(nba_shots$shot_quality)
summary(nba_shots$shot_quality)
OppPG <- rep(1, 473)
OppPPP <- rep(1, 473)
OppDist <- rep(1, 473)
ShotCont <- rep(1, 473)
RimDist <- rep(1, 473)
ShotsNear <- rep(1, 473)
FGM <- nba_shots$FGM
PTS <- nba_shots$PTS
CLOSE_DEF_DIST <- nba_shots$CLOSE_DEF_DIST
SHOT_DIST <- nba_shots$SHOT_DIST
CLOSEST_DEFENDER <- nba_shots$CLOSEST_DEFENDER
for (i in 1:473) {
OppPG[i] = sum(FGM[CLOSEST_DEFENDER == DefenderList[i]])
/length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppPPP[i] = sum(PTS[CLOSEST_DEFENDER == DefenderList[i]])
/length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppDist[i] = sum(CLOSEST_DEF_DIST[CLOSEST_DEFENDER == DefenderList[i]])
/length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
ShotsCont[i] = length(FGM[CLOSEST_DEFENDER == DefenderList[i]
& CLOSE_DEF_DIST <= 3.5])
RimDist[i] = sum(SHOT_DIST[CLOSEST_DEFENDER == DefenderList[i]])
}
nba_shots <- read.csv('shot_logs.csv')
setwd('/home/feier/Rtest')
nba_shots <- read.csv('shot_logs.csv')
dim(nba_shots)#data dimmision
str(nba_shots)#data structure
library(tidyverse)#data analysis package
ggplot(nba_shots, aes(SHOT_DIST))+geom_histogram()#shot distance graph
ggplot(nba_shots, aes(CLOSE_DEF_DIST))+geom_histogram()+xlim(0,20)
ggplot(nba_shots, aes(SHOT_DIST, CLOSE_DEF_DIST
))+geom_point(aes(color=factor(SHOT_RESULT)))
+geom_vline(xintercept=c(15,22), color='blue')
ggplot(nba_shots, aes(DRIBBLES,TOUCH_TIME))+
geom_point(aes(color=factor(SHOT_RESULT)))+
ylim(-10,20)
(home_avay <- nba_shots %>% group_by(LOCATION)
%>% summarise(PERCENTAGE=sum(FGM)/length(FGM)*100))
wins <- nba_shots %>% group_by(GAME_ID, LOCATION) %>% filter(W=='W', FGM==1)
ggplot(data = wins, aes(LOCATION, fill=factor(W)))+geom_bar()
first_quarter_guys <- nba_shots %>% filter(PERIOD==1,
SHOT_DIST>5) %>% group_by(player_name) %>%
summarise(made=sum(FGM), points=sum(PTS),
total_attempts = length(FGM),
ave_distance=mean(SHOT_DIST)) %>%
mutate(percentage=made/total_attempts) %>%
arrange(desc(percentage)) %>% filter(total_attempts>200)
best_lst <- data.frame(first_quarter_guys)
best_lst
nba_shots %>% filter(SHOT_RESULT=='missed') %>%
group_by(CLOSEST_DEFENDER) %>% summarise(GoodDefense = n()) %>%
ungroup %>% arrange(desc(GoodDefense)) %>% head
nba_shots %>% filter(SHOT_RESULT=='made') %>%
group_by(CLOSEST_DEFENDER) %>% summarise(BadDefense = n()) %>%
ungroup %>% arrange(desc(BadDefense)) %>% head
attach(nba_shots)
nba_shots <- nba_shots[TOUCH_TIME > 0,]
nba_shots <- nba_shots[,-14]
player_name <- as.character(player_name)
player_name <- factor(player_name)
GAME_CLOCK <- as.character(GAME_CLOCK)
GAME_CLOCK <- gsub(':', '.', GAME_CLOCK)
GAME_CLOCK <- as.numeric(GAME_CLOCK)
nba_shots$Crucial_time <- 'No'
nba_shots$Crucial_time[nba_shots$GAME_CLOCK <= 1 &
nba_shots$PERIOD >= 4 & abs(nba_shots$FINAL_MARGIN)
<= 5] <- 'Yes'
nba_shots$Crucial_time <- factor(nba_shots$Crucial_time)
nba_shots$shot_type[nba_shots$DRIBBLES <= 1 &
nba_shots$SHOT_DIST > 4] <- 'Catch and Shoot'
nba_shots$shot_type[nba_shots$DRIBBLES <= 1 &
nba_shots$SHOT_DIST <= 4] <- 'Cut'
nba_shots$shot_type [nba_shots$DRIBBLES > 1 &
nba_shots$SHOT_DIST <= 4] <- 'Drive'
nba_shots$shot_type [nba_shots$DRIBBLES > 4] <- 'ISO'
nba_shots$shot_type [nba_shots$DRIBBLES > 20] <- 'Long ISO'
nba_shots$shot_type [nba_shots$DRIBBLES <= 1 &
nba_shots$PTS_TYPE == 3] <- 'Spot up Three'
nba_shots$shot_type <- factor(nba_shots$shot_type)
summary(nba_shots$shot_type)
nba_shots$shot_quality <- 'Open'
nba_shots$shot_quality[nba_shots$CLOSE_DEF_DIST <= 2] <- 'Tightly Contested'
nba_shots$shot_quality[nba_shots$CLOSE_DEF_DIST <= 3.5] <- 'Contested'
nba_shots$shot_quality[nba_shots$CLOSE_DEF_DIST > 6] <- 'Wide Open'
nba_shots$shot_quality <- factor(nba_shots$shot_quality)
summary(nba_shots$shot_quality)
OppPG <- rep(1, 473)
OppPPP <- rep(1, 473)
OppDist <- rep(1, 473)
ShotCont <- rep(1, 473)
RimDist <- rep(1, 473)
ShotsNear <- rep(1, 473)
FGM <- nba_shots$FGM
PTS <- nba_shots$PTS
CLOSE_DEF_DIST <- nba_shots$CLOSE_DEF_DIST
SHOT_DIST <- nba_shots$SHOT_DIST
CLOSEST_DEFENDER <- nba_shots$CLOSEST_DEFENDER
for (i in 1:473) {
OppPG[i] = sum(FGM[CLOSEST_DEFENDER == DefenderList[i]])
/length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppPPP[i] = sum(PTS[CLOSEST_DEFENDER == DefenderList[i]])
/length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppDist[i] = sum(CLOSEST_DEF_DIST[CLOSEST_DEFENDER == DefenderList[i]])
/length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
ShotsCont[i] = length(FGM[CLOSEST_DEFENDER == DefenderList[i]
& CLOSE_DEF_DIST <= 3.5])
RimDist[i] = sum(SHOT_DIST[CLOSEST_DEFENDER == DefenderList[i]])
}
FGM <- nba_shots$FGM
PTS <- nba_shots$PTS
CLOSE_DEF_DIST <- nba_shots$CLOSE_DEF_DIST
SHOT_DIST <- nba_shots$SHOT_DIST
CLOSEST_DEFENDER <- nba_shots$CLOSEST_DEFENDER
for (i in 1:473) {
OppPG[i] = sum(FGM[CLOSEST_DEFENDER == DefenderList[i]]) /length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppPPP[i] = sum(PTS[CLOSEST_DEFENDER == DefenderList[i]]) /length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppDist[i] = sum(CLOSEST_DEF_DIST[CLOSEST_DEFENDER == DefenderList[i]]) /length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
ShotsCont[i] = length(FGM[CLOSEST_DEFENDER == DefenderList[i]
& CLOSE_DEF_DIST <= 3.5])
RimDist[i] = sum(SHOT_DIST[CLOSEST_DEFENDER == DefenderList[i]])
}
DefenderList <- nba_shots$DefenderLIst
for (i in 1:473) {
OppPG[i] = sum(FGM[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppPPP[i] = sum(PTS[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppDist[i] = sum(CLOSEST_DEF_DIST[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
ShotsCont[i] = length(FGM[CLOSEST_DEFENDER == DefenderList[i]
& CLOSE_DEF_DIST <= 3.5])
RimDist[i] = sum(SHOT_DIST[CLOSEST_DEFENDER == DefenderList[i]])
}
CLOSE_DEF_DIST <- nba_shots$CLOSE_DEF_DIST
CLOSEST_DEFENDER <- nba_shots$CLOSEST_DEFENDER
for (i in 1:473) {
OppPG[i] = sum(FGM[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppPPP[i] = sum(PTS[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppDist[i] = sum(CLOSEST_DEF_DIST[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
ShotsCont[i] = length(FGM[CLOSEST_DEFENDER == DefenderList[i]
& CLOSE_DEF_DIST <= 3.5])
RimDist[i] = sum(SHOT_DIST[CLOSEST_DEFENDER == DefenderList[i]])
}
CLOSE_DEF_DIST <- nba_shots$CLOSE_DEF_DIST
for (i in 1:473) {
OppPG[i] = sum(FGM[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppPPP[i] = sum(PTS[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
OppDist[i] = sum(CLOSEST_DEF_DIST[CLOSEST_DEFENDER == DefenderList[i]]) / length(FGM[CLOSEST_DEFENDER == DefenderList[i]])
ShotsCont[i] = length(FGM[CLOSEST_DEFENDER == DefenderList[i]
& CLOSE_DEF_DIST <= 3.5])
RimDist[i] = sum(SHOT_DIST[CLOSEST_DEFENDER == DefenderList[i]])
}
summary(nba_def)
nba_def <- data.frame(DefenderList, OppPG, OppPPP, OppDist,
ShotCont, RimDist, ShotsNear)
colour = FALSE) + labs(x = 'Opponent Field Goal Percentage',
y = 'Opponent Points per Possesion')
ggplot(data = nba_def[ShotCont >= 150 & OppPG <=
.41,], aes(OppPG, OppPPP)
) + geom_point(colour = 'black', size = 2)+geom_point(
aes(colour = DefenderList)) + geom_segment(method = 'lm',
se = FALSE) + geom_text(aes(label = DefenderList),
size = 1, vjust = 0, check_overlap = TRUE) + guides(
colour = FALSE) + labs(x = 'Opponent Field Goal Percentage',
y = 'Opponent Points per Possesion')
nba_def <- data.frame(DefenderList, OppPG, OppPPP, OppDist,
ShotCont, RimDist, ShotsNear)
